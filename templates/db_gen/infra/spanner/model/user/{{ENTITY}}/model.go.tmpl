// Code generated by cue_gen. DO NOT EDIT.
package {{.Name}}

import (
	"cloud.google.com/go/spanner"
	"time"
)

// Table の名前を定義
const TableName = "{{.Name}}"

// カラム名の定義
const (
{{range $Column := .Columns -}}
   Column{{$Column.Name | camelcase}} = "{{$Column.Name}}"
{{end}}
)

// プライマリーキー・カラムの配列
var (
	PrimaryKeys = []string{
{{- range $Column := .PrimaryKeys}}
    Column{{$Column.Name | camelcase}},
{{- end }}
	}
	Columns = []string{
{{- range $Column := .Columns}}
    Column{{$Column.Name | camelcase}},
{{- end}}
	}
)

// モデル定義
type Model struct {
{{- range $Column := .Columns }}
	// {{ .Description }}
	{{ .Name | camelcase }} {{ .GoType }} `json:"{{ .Name }}" db:"{{ .Name }}"`
{{- end }}
}

// NewModel - 新規作成
func New(
{{- range .PrimaryKeys }}
  {{ .Name | camelcase }} {{ .GoType }},
{{- end }}
{{- range .Columns }}
  {{- if and (not .IsCreatedAtColumn) (not .IsUpdatedAtColumn) (not .IsPrimaryKey)}}
    {{ .Name | camelcase }} {{ .GoType }},
  {{- end }}
{{- end }}
) *Model {
	return &Model{
	{{- range .PrimaryKeys }}
		{{ .Name | camelcase }}: {{ .Name | camelcase }},
	{{- end }}
	{{- range $Column := .Columns }}
		{{- if and (not .IsCreatedAtColumn) (not .IsUpdatedAtColumn) (not .IsPrimaryKey) }}
			{{ .Name | camelcase }}: {{ .Name | camelcase }},
		{{- end}}
	{{- end}}
	}
}

// Insert 用 Mutation
func (m *Model) InsertMutation() *spanner.Mutation {
	return spanner.Insert(
		TableName,
		Columns,
		[]interface{}{
			{{range .Columns}} m.{{.Name | camelcase}}, {{end}}
		},
	)
}

// Update 用 Mutation
func (m *Model) UpdateMutation() *spanner.Mutation {
	return spanner.Update(
		TableName,
		Columns,
		[]interface{}{
			{{range .Columns}} m.{{.Name | camelcase}}, {{end}}
		},
	)
}

// Delete 用 Mutation
func (m *Model) DeleteMutation() *spanner.Mutation {
	pk := spanner.Key{
		{{range .PrimaryKeys}} m.{{.Name | camelcase}}, {{end}}
	}
	return spanner.Delete(TableName, pk)
}

// Bind - Spanner Row を構造体にマッピング
func (m *Model) Bind(row *spanner.Row) error {
	return row.ToStruct(m)
}

// Validate - データのバリデーション
func (m *Model) Validate() error {
	{{- range $Column := .Columns }}
		{{ if eq .Type "enum" }}
		if !m.{{.Name | camelcase}}.Within() {
			return fmt.Errorf("invalid enum value: %v for column: {{.Name}}", m.{{.Name | camelcase}})
		}
		{{ end -}}
	{{ end -}}
	return nil
}
